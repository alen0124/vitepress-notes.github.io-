import{_ as s,c as l,o as a,a as e}from"./app.b454e50a.js";const g=JSON.parse('{"title":"Webpack 入门篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"站点","slug":"站点","link":"#站点","children":[]},{"level":2,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":2,"title":"webpack是什么？","slug":"webpack是什么","link":"#webpack是什么","children":[]},{"level":2,"title":"webpack五个核心概念","slug":"webpack五个核心概念","link":"#webpack五个核心概念","children":[]},{"level":2,"title":"webpack 的初体验","slug":"webpack-的初体验","link":"#webpack-的初体验","children":[{"level":3,"title":"初始化配置","slug":"初始化配置","link":"#初始化配置","children":[]},{"level":3,"title":"编译打包应用","slug":"编译打包应用","link":"#编译打包应用","children":[]}]}],"relativePath":"03.tools-framework/03.module-bundlers/03.webpack入门篇.md"}'),n={name:"03.tools-framework/03.module-bundlers/03.webpack入门篇.md"},p=e(`<h1 id="webpack-入门篇" tabindex="-1">Webpack 入门篇 <a class="header-anchor" href="#webpack-入门篇">¶</a></h1><h2 id="站点" tabindex="-1">站点 <a class="header-anchor" href="#站点">¶</a></h2><ul><li><a href="http://webpack.github.io/" target="_blank" rel="noreferrer">官网</a></li><li><a href="https://webpack.docschina.org/" target="_blank" rel="noreferrer">官方中文文档</a></li></ul><h2 id="前置知识" tabindex="-1">前置知识 <a class="header-anchor" href="#前置知识">¶</a></h2><p>常用模块化打包工具：</p><p><strong>1、webpack</strong></p><p>是npm的工具模块，实现了文件的打包功能。对于打包结果，webpack会将文件合并，同时提供基础代码，让打包前后代码之间的逻辑不变。webpack建议根据代码的需要，可以动态引入任何资源，包括css、图片文件等。JS作为前端驱动，资源与JS形成依赖，可以保证上线时的资源文件都是必要的。</p><p>特性：</p><ul><li>loader</li><li>minimizer</li><li>plugin</li><li>TreeShaking</li><li>SideEffects</li><li>HMR</li><li>watch工作模式</li></ul><p>webpack打包后的代码，是自调用函数，运行时，函数开始自调用，会一个一个的按模块(前面提到过，ESM一个文件就是一个模块)加载代码，并做加载缓存处理，当有缓存中有被加载过的模块，优先读取缓存。</p><p><strong>2、<a href="https://www.rollupjs.com/" target="_blank" rel="noreferrer">Rollup</a></strong></p><p>优点：</p><ul><li>输出结果更加扁平</li><li>自动移除未引用代码</li><li>打包结果依然完全可读</li></ul><p>缺点：</p><ul><li>加载非ESM的三方模块较为复杂</li><li>模块最终都被打包到一个函数中，无法实现HMR</li><li>浏览器环境，代码拆分需要依赖AMD库</li></ul><p><strong>3、Parcel</strong></p><p>零配置的前端应用打包器</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>建议开发 应用程序，使用 <code>webpack</code>，开发框架或类库，使用<code>Rollup</code></p></div><h2 id="webpack是什么" tabindex="-1">webpack是什么？ <a class="header-anchor" href="#webpack是什么">¶</a></h2><p><img src="https://cdn.jsdelivr.net/gh/leijialin/noteImages/notes/webpack/webpack1_1.png" alt=""></p><p>Webpack是一种前端资源构建工具，一个静态模块打包器（module bundler）。</p><p>在Webpack看来，前端的所有资源（js、json、css、img、less等）都会当做模块处理。</p><p><img src="https://cdn.jsdelivr.net/gh/leijialin/noteImages/notes/webpack/webpack1_2.png" alt=""></p><p><strong>工作流程</strong></p><p>从入口文件开始，建立依赖树 ——&gt; 递归依赖树——&gt; rules属性 -&gt; test正则匹配文件，使用加载器，加载模块——&gt; loader处理 ——&gt; plugin ——&gt; boundle.js 完成打包。</p><h2 id="webpack五个核心概念" tabindex="-1">webpack五个核心概念 <a class="header-anchor" href="#webpack五个核心概念">¶</a></h2><ul><li><strong>Entry</strong></li></ul><p>入口(Entry)指示 webpack 以哪个文件为入口起点开始打包，分析构建内部依赖图。</p><ul><li><strong>Output</strong></li></ul><p>输出(Output)指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名。</p><ul><li><strong>Loader（加载器）</strong></li></ul><p>Loader 让 webpack 能够去处理那些非JavaScript文件(webpack自身只理解JavaScript)</p><ul><li><strong>Plugins（插件）</strong></li></ul><p>插件(Plugins)可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩， 一直到重新定义环境中的变量等。</p><ul><li><strong>Mode</strong></li></ul><p>模式(Mode)指示 webpack 使用相应模式的配置。</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置 为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</td><td>能让代码本地调试 运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置 为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</td><td>能让代码优化上线 运行的环境</td></tr></tbody></table><h2 id="webpack-的初体验" tabindex="-1">webpack 的初体验 <a class="header-anchor" href="#webpack-的初体验">¶</a></h2><h3 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置">¶</a></h3><ol><li>初始化 <code>package.json</code></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span>
<span class="line"></span></code></pre></div><ol><li>下载并安装 <code>webpack</code></li></ol><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm install webpack webpack-cli -g </span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack-cli</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># (推荐)</span></span>
<span class="line"></span></code></pre></div><h3 id="编译打包应用" tabindex="-1">编译打包应用 <a class="header-anchor" href="#编译打包应用">¶</a></h3><ol><li>创建文件 <code>index.js</code></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./data.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><ol><li>运行指令</li></ol><p>开发环境指令：<code>webpack src/js/index.js -o build/js/built.js --mode=development</code></p><p>功能：webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成 浏览器能识别的语法。</p><p>生产环境指令：<code>webpack src/js/index.js -o build/js/built.js --mode=production</code></p><p>功能：在开发配置功能上多一个功能，压缩代码。</p><ol><li>结论webpack 能够编译打包 js 和 json 文件。 能将 es6 的模块化语法转换成浏览器能识别的语法。 能压缩代码。</li></ol><div class="warning custom-block"><p class="custom-block-title">注意</p><ul><li>不能编译打包 css、img 等文件</li><li>不能将 js 的 es6 基本语法转化为 es5 以下语法</li></ul></div>`,53),o=[p];function t(c,i,r,d,u,b){return a(),l("div",null,o)}const y=s(n,[["render",t]]);export{g as __pageData,y as default};
