import{_ as s,c as a,o as e,a as l}from"./app.b454e50a.js";const D=JSON.parse('{"title":"Node 基础篇","description":"","frontmatter":{},"headers":[{"level":2,"title":"推荐站点&文章","slug":"推荐站点-文章","link":"#推荐站点-文章","children":[]},{"level":2,"title":"Node 简介","slug":"node-简介","link":"#node-简介","children":[]},{"level":2,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]}],"relativePath":"02.advanced/05.node/01.基础篇.md"}'),n={name:"02.advanced/05.node/01.基础篇.md"},o=l(`<h1 id="node-基础篇" tabindex="-1">Node 基础篇 <a class="header-anchor" href="#node-基础篇">¶</a></h1><h2 id="推荐站点-文章" tabindex="-1">推荐站点&amp;文章 <a class="header-anchor" href="#推荐站点-文章">¶</a></h2><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noreferrer">Node官网</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noreferrer">Node中文官网</a></li><li><a href="https://cnodejs.org/" target="_blank" rel="noreferrer">Node中文社区</a></li><li><a href="https://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noreferrer">《Node入门》书籍</a></li><li><a href="https://github.com/qianguyihao/Web/tree/master/11-Node.js" target="_blank" rel="noreferrer">千古壹号 Node</a></li><li><a href="https://segmentfault.com/a/1190000016654305" target="_blank" rel="noreferrer">NodeJS 树结构遍历——深度优先和广度优先</a></li><li><a href="https://nodejs.org/dist/" target="_blank" rel="noreferrer">Node历史版本下载地址</a></li></ul><h2 id="node-简介" tabindex="-1">Node 简介 <a class="header-anchor" href="#node-简介">¶</a></h2><p>简单地说，Node（或者说 Node.js，两者是等价的）是 JavaScript 的一种<strong>运行环境</strong>。在此之前，我们知道 JavaScript 都是在浏览器中执行的，用于给网页添加各种动态效果，那么可以说<strong>浏览器也是 JavaScript 的运行环境</strong>。那么这两个运行环境有哪些差异呢？请看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/leijialin/noteImages/notes/node/base/1.png" alt=""></p><p>两个运行环境共同包含了 <code>ECMAScript</code>，也就是剥离了所有运行环境的 <code>JavaScript</code> <strong>语言标准</strong>本身。现在 <code>ECMAScript</code> 的发展速度非常惊人，几乎能够做到每年发展一个版本。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现。在日常场合，这两个词是可以互换的。</p><p>更多背景知识可参考阮一峰的<a href="http://javascript.ruanyifeng.com/introduction/history.html" target="_blank" rel="noreferrer">《JavaScript语言的历史》</a></p></div><p>另一方面，浏览器端 JavaScript 还包括了：</p><ul><li>浏览器对象模型（Browser Object Model，简称 BOM），也就是 <code>window</code> 对象</li><li>文档对象模型（Document Object Model，简称 DOM），也就是 <code>document</code> 对象</li></ul><p>而 Node.js 则是包括 V8 引擎。V8 是 Chrome 浏览器中的 JavaScript 引擎，经过多年的发展和优化，性能和安全性都已经达到了相当的高度。而 Node.js 则进一步将 V8 引擎加工成可以在任何操作系统中运行 JavaScript 的平台。</p><h2 id="hello-world" tabindex="-1">Hello World <a class="header-anchor" href="#hello-world">¶</a></h2><p>运行 Node 代码通常有两种方式：</p><ul><li><strong>1）在 REPL 中交互式输入和运行</strong></li></ul><p>如果你已经安装好了 Node，那么运行以下命令就可以输出 Node.js 的版本：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># v12.10.0</span></span>
<span class="line"></span></code></pre></div><p>然后，我们还可以进入 Node REPL（直接输入 <code>node</code>），然后输入任何合法的 JavaScript 表达式或语句：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span></span>
<span class="line"><span style="color:#FFCB6B;">Welcome</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Node.js</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">v12.10.0.</span></span>
<span class="line"><span style="color:#FFCB6B;">Type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.help</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">more</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">information.</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> + </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> var x = </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">undefined</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> x + </span><span style="color:#F78C6C;">20</span></span>
<span class="line"><span style="color:#F78C6C;">30</span></span>
<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> console.log</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">World</span></span>
<span class="line"><span style="color:#FFCB6B;">undefined</span></span>
<span class="line"></span></code></pre></div><p>有些行的开头是 <code>&gt;</code>，代表输入提示符，因此 <code>&gt;</code> 后面的都是我们要输入的命令，其他行则是表达式的返回值或标准输出（Standard Output，stdout）。运行的效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/leijialin/noteImages/notes/node/base/2.gif" alt=""></p><ul><li><strong>2）将代码写入 JS 文件，并用 Node 执行</strong></li></ul><p>REPL 通常用来进行一些代码的试验。在搭建具体应用时，更多的还是创建 Node 文件。我们先创建一个最简单的 Node.js 脚本文件，叫做 timer.js，代码如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre></div><p>然后用 Node 解释器执行这个文件：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">node</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">timer.js</span></span>
<span class="line"><span style="color:#FFCB6B;">Hello</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">World!</span></span>
<span class="line"></span></code></pre></div><p>看上去非常平淡无奇，但是这一行代码却凝聚了 Node.js 团队背后的心血。我们来对比一下，在浏览器和 Node 环境中执行这行代码有什么区别：</p><ul><li>在浏览器运行 <code>console.log</code> 调用了 BOM，实际上执行的是 <code>window.console.log(&#39;Hello World!&#39;)</code></li><li>Node 首先在所处的操作系统中创建一个新的进程，然后向标准输出打印了指定的字符串， 实际上执行的是 <code>process.stdout.write(&#39;Hello World!\\n&#39;)</code></li></ul><p>简而言之，Node 为我们提供了一个无需依赖浏览器、能够直接与操作系统进行交互的 JavaScript 代码运行环境！</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p><code>REPL</code> 的全称是 Read Eval Print Loop（读取-执行-输出-循环），通常可以理解为<strong>交互式解释器</strong>，你可以输入任何表达式或语句，然后就会立刻执行并返回结果。</p></div>`,29),p=[o];function t(r,c,d,i,C,y){return e(),a("div",null,p)}const g=s(n,[["render",t]]);export{D as __pageData,g as default};
