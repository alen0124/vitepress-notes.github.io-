import{_ as s,c as n,o,a}from"./app.b454e50a.js";const g=JSON.parse('{"title":"jsconfig.json","description":"","frontmatter":{},"headers":[{"level":2,"title":"基础知识","slug":"基础知识","link":"#基础知识","children":[]}],"relativePath":"01.basics/06.EnvironmentConfiguration/01.jsconfig.json.md"}'),l={name:"01.basics/06.EnvironmentConfiguration/01.jsconfig.json.md"},e=a(`<h1 id="jsconfig-json" tabindex="-1">jsconfig.json <a class="header-anchor" href="#jsconfig-json">¶</a></h1><ul><li><a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noreferrer">英文原版文档地址</a></li></ul><p><strong>jsconfig.json</strong> 是一个用于配置 JavaScript 项目的文件,它提供了一种方式来定制 JavaScript 语言服务和编辑器的行为。jsconfig.json 的主要作用是为 JavaScript 项目提供更好的编辑器支持,如智能提示、代码导航、重构等。它通过指定项目的根目录、语言版本、模块解析策略等配置,帮助编辑器更准确地理解和分析项目中的代码。</p><h2 id="基础知识" tabindex="-1">基础知识 <a class="header-anchor" href="#基础知识">¶</a></h2><p><strong>jsconfig.json</strong> 适用于纯 JavaScript 项目,特别是那些没有使用 TypeScript 的项目。对于使用 TypeScript 的项目,则应该使用 tsconfig.json 作为配置文件。jsconfig.json 通常在项目的根目录下创建,作用于整个项目。如果项目中存在多个 jsconfig.json 文件,则每个文件的作用范围为其所在的目录及子目录。</p><p>jsconfig.json 使用 JSON 格式编写,其基本结构如下:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 编译器选项</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exclude</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 排除的文件和目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 包含的文件和目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>jsconfig.json 中的主要属性包括:</p><ul><li><code>compilerOptions</code>: 指定编译器选项,如目标 JavaScript 版本、模块解析策略、路径映射等。</li><li><code>exclude</code>: 指定要排除的文件和目录,编辑器将忽略这些文件。</li><li><code>include</code>: 指定要包含的文件和目录,编辑器只处理这些文件。</li></ul><p>其中,<code>compilerOptions</code> 是最常用的属性,它包含了许多配置项,用于控制 JavaScript 语言服务的行为。下面是一些常见的 <code>compilerOptions</code> 配置项:</p><ul><li><code>target</code>: 指定 JavaScript 语言版本,如 ES3、ES5、ES2015 等。</li><li><code>module</code>: 指定模块解析策略,如 CommonJS、AMD、ESNext 等。</li><li><code>moduleResolution</code>: 指定模块解析算法,如 Node、Classic。</li><li><code>baseUrl</code>: 指定解析非相对模块的基础目录。</li><li><code>paths</code>: 指定模块名到基于 baseUrl 的路径映射。</li></ul><p>要创建 <code>jsconfig.json</code> 文件,可以在项目的根目录下新建一个名为 <code>jsconfig.json</code> 的文件,然后根据项目的需求进行配置。大多数编辑器和 IDE 都支持 jsconfig.json,如 Visual Studio Code、WebStorm 等。这些编辑器会自动读取 jsconfig.json 文件,并根据其中的配置提供相应的语言支持和编辑器功能。</p><p>当项目中存在 <code>jsconfig.json</code> 文件时,编辑器会根据文件中的配置对项目进行解析和分析。这可能会影响以下几个方面:</p><ul><li>智能提示: 编辑器会根据 jsconfig.json 中的配置提供更准确的代码补全和建议。</li><li>代码导航: 编辑器可以提供更准确的定义跳转、查找引用等功能。</li><li>重构: 编辑器可以根据 jsconfig.json 中的配置提供更可靠的重构操作,如重命名、提取变量等。</li><li>错误检查: 编辑器可以根据 jsconfig.json 中的配置对代码进行静态分析,提供错误提示和警告。</li></ul><p>总之,jsconfig.json 是一个非常有用的配置文件,它可以显著提升 JavaScript 项目的开发体验。通过合理配置 jsconfig.json,开发者可以享受到更智能、更高效的编辑器支持,从而提高开发效率和代码质量。</p>`,15),c=[e];function p(i,t,r,d,j,D){return o(),n("div",null,c)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};
